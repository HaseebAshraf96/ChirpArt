import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.GeneralPath;
import java.util.LinkedList;
import javax.swing.JFrame;
import java.io.*;
import javax.swing.JPanel;
import java.io.BufferedReader;
import java.io.InputStreamReader;
public class Drawing extends JPanel implements MouseListener, MouseMotionListener {
   int count =0;
   GeneralPath path =new GeneralPath();
   LinkedList<GeneralPath> old_paths= new LinkedList<GeneralPath>();
    
   public Drawing() {
       setBackground(Color.WHITE);
       addMouseListener(this);
       addMouseMotionListener(this);
   }

   public void paintComponent(Graphics gfx) {
       super.paintComponent(gfx);
       Graphics2D g = (Graphics2D) gfx;
       g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
       g.setColor(Color.BLACK);
       g.setStroke(new BasicStroke(2));        
       for (GeneralPath old_path : old_paths ) {
           g.draw(old_path);
       }
       g.setStroke(new BasicStroke(2));
       g.draw(path);        
   }

   public void mouseClicked(MouseEvent leapEvent) {
   }

   public void mouseEntered(MouseEvent leapEvent) {
   }

   public void mouseExited(MouseEvent leapEvent) {
   }
   
   public void mousePressed(MouseEvent leapEvent) {
       old_paths.add(path);
       path = new GeneralPath();
       path.moveTo(leapEvent.getX(), leapEvent.getY());
       repaint(); 
   }

   public void mouseReleased(MouseEvent leapEvent) {
   }

   public void mouseDragged(MouseEvent leapEvent) {
       path.lineTo(leapEvent.getX(), leapEvent.getY());
       repaint();
       try{
           if (count == 0){
           FileWriter fstream = new FileWriter("chirpText1.txt");
       }else {
           
             FileWriter fstream = new FileWriter("chirpText1.txt", true);
             BufferedWriter out = new BufferedWriter(fstream);
             out.write("x:" +leapEvent.getX());
             out.write("y:" +leapEvent.getY());
             out.close();
           }
       } catch (Exception e){
               System.err.println("Error: " + e.getMessage());
           }
           count = count + 1;
           System.out.println ("x: " +leapEvent.getX() +" y: " +leapEvent.getY() +"Total Count: " +count);
       }

      public void mouseMoved(MouseEvent me) {        
   }

   public static void main(String[] args) {
       JFrame frame = new JFrame("Leap drawing Host");
       frame.setSize(1000,2000);
       frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       frame.add(new Drawing());
       frame.setVisible(true);
       frame.setResizable(false);
   }
}